import React, { useState } from 'react';

export default function MainInterface() {
  const [buildingType, setBuildingType] = useState('');
  const [damages, setDamages] = useState([{ type: '', location: '' }]);
  const [result, setResult] = useState(null);

  const handleDamageChange = (index, field, value) => {
    const updated = [...damages];
    updated[index][field] = value;
    setDamages(updated);
  };

  const addDamage = () => {
    setDamages([...damages, { type: '', location: '' }]);
  };

  const getDecision = () => {
    const match = buildingType === '–ü-46' && damages.some(d => d.type === '—Ç—Ä—ñ—â–∏–Ω–∞');
    setResult({
      status: match ? '–ó–Ω–∞–π–¥–µ–Ω–æ –∞–Ω–∞–ª–æ–≥' : '–ê–Ω–∞–ª–æ–≥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
      solution: match ? '–°—Ç—ñ–π–∫–∏ PERI + –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É' : '–†—É—á–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è —Ñ–∞—Ö—ñ–≤—Ü—è'
    });
  };

  const downloadReport = () => {
    const lines = [
      `–°–µ—Ä—ñ—è –±—É–¥—ñ–≤–ª—ñ: ${buildingType}`,
      ...damages.map((d, i) => `–ü–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è ${i + 1}: ${d.type} ‚Äî ${d.location}`),
      `–°—Ç–∞—Ç—É—Å: ${result?.status || '-'}`,
      `–†—ñ—à–µ–Ω–Ω—è: ${result?.solution || '-'}`
    ];
    const blob = new Blob([lines.join('\n')], { type: 'text/plain' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'zvit.txt';
    link.click();
    URL.revokeObjectURL(link.href);
  };

  return (
    <div className="main-interface">
    <div className="p-6 max-w-xl mx-auto space-y-4">
      <h2 className="text-2xl font-bold">üèó –î–µ–º–æ–≤–µ—Ä—Å—ñ—è –≤–∏–±–æ—Ä—É —Ä—ñ—à–µ–Ω—å</h2>
      <div>
        <label className="block font-medium mb-1">–°–µ—Ä—ñ—è –±—É–¥—ñ–≤–ª—ñ</label>
        <select className=" select w-full border p-2" onChange={e => setBuildingType(e.target.value)} value={buildingType}>
          <option value="">–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é</option>
          <option value="–ü-46">–ü-46</option>
          <option value="–Ü-464">–Ü-464</option>
          <option value="–Ü–ü-46–°">–Ü–ü-46–°</option>
          <option value="–ö–ü">–ö–ü</option>
          <option value="—ñ–Ω—à–µ">–Ü–Ω—à–µ</option>
        </select>
      </div>
      {damages.map((d, index) => (
        <div key={index} className="space-y-2 border rounded p-3">
          <p className="font-semibold">–ü–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è {index + 1}</p>
          <select className=" select w-full p-2 border" value={d.type} onChange={e => handleDamageChange(index, 'type', e.target.value)}>
            <option value="">–¢–∏–ø –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è</option>
            <option value="—Ç—Ä—ñ—â–∏–Ω–∞">–¢—Ä—ñ—â–∏–Ω–∞</option>
            <option value="–æ–±–≤–∞–ª">–û–±–≤–∞–ª</option>
            <option value="–¥–µ—Ñ–æ—Ä–º–∞—Ü—ñ—è">–î–µ—Ñ–æ—Ä–º–∞—Ü—ñ—è</option>
            <option value="–æ—Å—ñ–¥–∞–Ω–Ω—è">–û—Å—ñ–¥–∞–Ω–Ω—è</option>
          </select>
          <select className="w-full p-2 border" value={d.location} onChange={e => handleDamageChange(index, 'location', e.target.value)}>
            <option value="">–õ–æ–∫–∞—Ü—ñ—è</option>
            <option value="—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç">–§—É–Ω–¥–∞–º–µ–Ω—Ç</option>
            <option value="1 –ø–æ–≤–µ—Ä—Ö">1 –ø–æ–≤–µ—Ä—Ö</option>
            <option value="–∫—É—Ç">–ö—É—Ç</option>
            <option value="–≤–µ—Ä—Ö–Ω—ñ–π –ø–æ–≤–µ—Ä—Ö">–í–µ—Ä—Ö–Ω—ñ–π –ø–æ–≤–µ—Ä—Ö</option>
          </select>
        </div>
      ))}
      <button className=" button bg-gray-100 text-sm px-4 py-1 border" onClick={addDamage}>‚ûï –î–æ–¥–∞—Ç–∏ —â–µ</button>
      <div className="flex gap-2">
        <button className="button bg-blue-600 text-white px-4 py-2" onClick={getDecision}>–û—Ç—Ä–∏–º–∞—Ç–∏ —Ä—ñ—à–µ–Ω–Ω—è</button>
        <button className="button bg-gray-200 px-4 py-2" onClick={downloadReport}>–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–≤—ñ—Ç</button>
      </div>
      {result && (
        <div className="p-4 mt-4 bg-green-100 rounded">
          <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {result.status}</p>
          <p><strong>–†—ñ—à–µ–Ω–Ω—è:</strong> {result.solution}</p>
        </div>
      )}
    </div>
    </div>
  );
}